version: 2.1

executors:
  node-executor:
    docker:
      - image: cimg/node:18.20.2

jobs:
  build:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Install dependencies & tools
          command: |
            sudo apt-get update && sudo apt-get install -y tar unzip less zip
            curl -sSL https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
            unzip awscliv2.zip && sudo ./aws/install
            npm install --legacy-peer-deps
      - run:
          name: Download environment config
          command: |
            if [ "$CIRCLE_BRANCH" == "develop" ]; then
              ENV_FILE=".env.tbd-staging.txt"
            elif [[ "$CIRCLE_BRANCH" == crm-hotfix-* ]] || [[ "$CIRCLE_BRANCH" == "master" ]]; then
              ENV_FILE=".env.live.txt"
            elif [[ "$CIRCLE_BRANCH" == crm-slrb-* ]]; then
              ENV_FILE=".env.tbd-staging.txt"
            else
              echo "No .env needed" && exit 0
            fi
            aws s3 cp s3://crm-art/crm-envs-fe/$ENV_FILE .env
      - run:
          name: Build app
          command: CI=false npm run build
      - run:
          name: Package artifacts
          command: |
            mkdir dist && cp -r build/* dist/
            zip -r build.zip dist
      - persist_to_workspace:
          root: .
          paths:
            - .env
            - dist

  build-production:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Install dependencies & tools
          command: |
            sudo apt-get update && sudo apt-get install -y tar unzip less zip
            curl -sSL https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
            unzip awscliv2.zip && sudo ./aws/install
            npm install --legacy-peer-deps
      - run:
          name: Download .env.tbd-production.txt
          command: aws s3 cp s3://crm-art/crm-envs-fe/.env.tbd-production.txt .env
      - run:
          name: Build app
          command: CI=false npm run build
      - run:
          name: Package artifacts
          command: |
            mkdir dist && cp -r build/* dist/
            zip -r build.zip dist
      - persist_to_workspace:
          root: .
          paths:
            - .env
            - dist

  deploy:
    docker:
      - image: cimg/node:18.20.2
    parameters:
      environment:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: workspace
      - run:
          name: Determine Deployment Target
          command: |
            if [ "$CIRCLE_BRANCH" == "develop" ]; then
              DEPLOY_ENV="staging"
            else
              DEPLOY_ENV="$CIRCLE_BRANCH"
            fi
            echo "Deploying to $DEPLOY_ENV environment"
            echo "export DEPLOY_ENV=$DEPLOY_ENV" >> $BASH_ENV
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get update && sudo apt-get install -y unzip
            curl -sSL https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
            unzip awscliv2.zip && sudo ./aws/install
      - run:
          name: Deploy to S3
          command: |
            source $BASH_ENV
            echo "Deploying to S3 bucket path: $DEPLOY_ENV"
            aws s3 sync workspace/dist/ s3://microfrontend-crm-ms/$DEPLOY_ENV/ --acl public-read
            
      - run:
          name: Invalidate CloudFront Cache
          command: |
            CLOUDFRONT_DIST_ID=E27YPOVXTAAHKM
            INVALIDATION_ID=$(aws cloudfront create-invalidation \
              --distribution-id $CLOUDFRONT_DIST_ID \
              --paths "/<< parameters.environment >>/*" \
              --query "Invalidation.Id" --output text)
            echo "Waiting for invalidation $INVALIDATION_ID..."
            while true; do
              STATUS=$(aws cloudfront get-invalidation \
                --distribution-id $CLOUDFRONT_DIST_ID \
                --id $INVALIDATION_ID \
                --query "Invalidation.Status" --output text)
              echo "Status: $STATUS"
              [ "$STATUS" == "Completed" ] && break
              sleep 10
            done
      - run:
          name: Verify Deployed URL
          command: |
            if [ "$CIRCLE_BRANCH" == "develop" ]; then
              DEPLOY_ENV="staging"
            else
              DEPLOY_ENV="$CIRCLE_BRANCH"
            fi
      
            URL="https://crm-microfrontend.ms-visp.net/$DEPLOY_ENV"
            echo "Testing $URL"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -L "$URL")
            [[ "$STATUS" =~ ^2|^3 ]] && echo "Success" || (echo "Failed: $STATUS" && exit 1)


  notify-ringcentral:
    docker:
      - image: cimg/base:stable
    steps:
      - run:
          name: Notify RingCentral
          command: |
            BRANCH_NAME=${CIRCLE_BRANCH}
            URL="https://crm-microfrontend.ms-visp.net/$BRANCH_NAME"
            curl -X POST -H 'Content-Type: application/json' -d "{\"payload\":{\"title\":\"Deployment Complete\",\"body\":\"Branch: $BRANCH_NAME\\nURL: $URL\",\"status\":\"success\"}}" $RINGCENTRAL



wokflows:
  version: 2
  jobs:
  build:
    docker:
      - image: cimg/node:18.20.2
    steps:
      - run: echo "Building $CIRCLE_BRANCH"

  deploy:
    docker:
      - image: cimg/node:18.20.2
    parameters:
      environment:
        type: string
    steps:
      - run: echo "Deploying to << parameters.environment >>"

workflows:
  version: 2
  deploy-standard:
    jobs:
      - build:
          filters:
            branches:
              only:
                - develop
                - /crm-slrb-.*/
                - /crm-hotfix-.*/
      - deploy:
          name: deploy-branch
          requires:
            - build
          environment: << pipeline.git.branch >>
          filters:
            branches:
              only:
                - develop
                - /crm-slrb-.*/
                - /crm-hotfix-.*/
