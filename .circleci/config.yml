version: 2.1

executors:
  node-executor:
    docker:
      - image: cimg/node:18.20.2

jobs:
  build-tbd:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Install dependencies & tools
          command: |
            sudo apt-get update && sudo apt-get install -y tar unzip less zip
            curl -sSL https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
            unzip awscliv2.zip && sudo ./aws/install
            npm install --legacy-peer-deps
      - run:
          name: Download environment config
          command: |
            if [ "$CIRCLE_BRANCH" == "develop" ]; then
              ENV_FILE=".env.tbd-staging.txt"
            elif [[ "$CIRCLE_BRANCH" == crm-hotfix-* ]] || [[ "$CIRCLE_BRANCH" == "master" ]]; then
              ENV_FILE=".env.tbd-production.txt"
            elif [[ "$CIRCLE_BRANCH" == crm-slrb-* ]]; then
              ENV_FILE=".env.tbd-staging.txt"
            elif [[ "$CIRCLE_BRANCH" =~ ^crm-[0-9]+$ ]]; then
              ENV_FILE=".env.staging.txt"
            else
              echo "No .env needed" && exit 0
            fi
            mkdir -p workspace-tbd
            aws s3 cp s3://crm-art/crm-envs-fe/$ENV_FILE workspace-tbd/.env
      - run:
          name: Build
          command: |
            CI=false npm run build
            mkdir -p workspace-tbd/dist && cp -r build/* workspace-tbd/dist/
      - persist_to_workspace:
          root: .
          paths:
            - workspace-tbd

  build-non-tbd:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Install dependencies & tools
          command: |
            sudo apt-get update && sudo apt-get install -y tar unzip less zip
            curl -sSL https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
            unzip awscliv2.zip && sudo ./aws/install
            npm install --legacy-peer-deps
      - run:
          name: Download non-tbd environment config
          command: |
            if [ "$CIRCLE_BRANCH" == "develop" ] || [[ "$CIRCLE_BRANCH" =~ ^crm-[0-9]+$ ]]; then
              ENV_FILE=".env.staging.txt"
              mkdir -p workspace-nontbd
              aws s3 cp s3://crm-art/crm-envs-fe/$ENV_FILE workspace-nontbd/.env
            else
              echo "No .env needed" && exit 0
            fi
      - run:
          name: Build
          command: |
            CI=false npm run build
            mkdir -p workspace-nontbd/dist && cp -r build/* workspace-nontbd/dist/
      - persist_to_workspace:
          root: .
          paths:
            - workspace-nontbd

  deploy-standard:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install dependencies & tools
          command: |
            sudo apt-get update && sudo apt-get install -y tar unzip less zip
            curl -sSL https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
            unzip awscliv2.zip && sudo ./aws/install
            npm install --legacy-peer-deps
      - run:
          name: Copy build artifacts based on branch type
          command: |
            if [[ "$CIRCLE_BRANCH" =~ ^crm-[0-9]+$ ]]; then
              cp /tmp/workspace/workspace-nontbd/.env .env
              cp -r /tmp/workspace/workspace-nontbd/dist ./dist
            else
              cp /tmp/workspace/workspace-tbd/.env .env
              cp -r /tmp/workspace/workspace-tbd/dist ./dist
            fi
      - run:
          name: Determine Deployment Folder
          command: |
            if [[ "$CIRCLE_BRANCH" == "develop" ]]; then
              DEPLOY_PATH="staging"
            else
              DEPLOY_PATH="$CIRCLE_BRANCH"
            fi
            echo "export DEPLOY_PATH=$DEPLOY_PATH" >> $BASH_ENV
      - run:
          name: Deploy to S3
          command: |
            source $BASH_ENV
            aws s3 sync dist/ s3://microfrontend-crm-ms/$DEPLOY_PATH/ --acl public-read
            aws cloudfront create-invalidation --distribution-id E27YPOVXTAAHKM --paths "/$DEPLOY_PATH/*"
      - run:
          name: Verify Deployed URL
          command: |
            source $BASH_ENV
            URL="https://crm-microfrontend.ms-visp.net/$DEPLOY_PATH"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -L "$URL")
            [[ "$STATUS" =~ ^2|^3 ]] && echo "✅ Deployment verified: $STATUS" || (echo "❌ Verification failed: $STATUS" && exit 1)

  deploy-staging:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install dependencies & tools
          command: |
            sudo apt-get update && sudo apt-get install -y tar unzip less zip
            curl -sSL https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
            unzip awscliv2.zip && sudo ./aws/install
            npm install --legacy-peer-deps
      - run:
          name: Deploy to Staging
          command: |
            aws s3 sync /tmp/workspace/workspace-tbd/dist/ s3://microfrontend-crm-ms/tbd-staging/ --acl public-read
            aws cloudfront create-invalidation --distribution-id E27YPOVXTAAHKM --paths "/tbd-staging/*"
      - run:
          name: Verify Deployed URL
          command: |
            URL="https://crm-microfrontend.ms-visp.net/tbd-staging"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -L "$URL")
            [[ "$STATUS" =~ ^2|^3 ]] && echo "✅ Deployment verified: $STATUS" || (echo "❌ Verification failed: $STATUS" && exit 1)

  deploy-preview:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install dependencies & tools
          command: |
            sudo apt-get update && sudo apt-get install -y tar unzip less zip
            curl -sSL https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
            unzip awscliv2.zip && sudo ./aws/install
            npm install --legacy-peer-deps
      - run:
          name: Deploy to Preview
          command: |
            aws s3 sync /tmp/workspace/workspace-tbd/dist/ s3://microfrontend-crm-ms/${CIRCLE_BRANCH}/ --acl public-read
            aws cloudfront create-invalidation --distribution-id E27YPOVXTAAHKM --paths "/${CIRCLE_BRANCH}/*"
      - run:
          name: Verify Preview
          command: |
            URL="https://crm-microfrontend.ms-visp.net/${CIRCLE_BRANCH}"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -L "$URL")
            [[ "$STATUS" =~ ^2|^3 ]] && echo OK || exit 1

  deploy-hotfix-production:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install dependencies & tools
          command: |
            sudo apt-get update && sudo apt-get install -y tar unzip less zip
            curl -sSL https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
            unzip awscliv2.zip && sudo ./aws/install
            npm install --legacy-peer-deps
      - run:
          name: Deploy to Production
          command: |
            aws s3 sync /tmp/workspace/workspace-tbd/dist/ s3://microfrontend-crm-ms/tbd-production/ --acl public-read
            aws cloudfront create-invalidation --distribution-id E27YPOVXTAAHKM --paths "/tbd-production/*"
      - run:
          name: Verify Production
          command: |
            URL="https://crm-microfrontend.ms-visp.net/tbd-production"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -L "$URL")
            [[ "$STATUS" =~ ^2|^3 ]] && echo OK || exit 1

  deploy-develop-production:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install dependencies & tools
          command: |
            sudo apt-get update && sudo apt-get install -y tar unzip less zip
            curl -sSL https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
            unzip awscliv2.zip && sudo ./aws/install
            npm install --legacy-peer-deps
      - run:
          name: Deploy to Production
          command: |
            aws s3 sync /tmp/workspace/workspace-tbd/dist/ s3://microfrontend-crm-ms/tbd-production/ --acl public-read
            aws cloudfront create-invalidation --distribution-id E27YPOVXTAAHKM --paths "/tbd-production/*"
      - run:
          name: Verify Production
          command: |
            URL="https://crm-microfrontend.ms-visp.net/tbd-production"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -L "$URL")
            [[ "$STATUS" =~ ^2|^3 ]] && echo OK || exit 1

workflows:
  version: 2
  deploy-flow:
    jobs:
      - build-tbd:
          filters:
            branches:
              only:
                - develop
                - /crm-slrb-.*/
      - build-non-tbd:
          filters:
            branches:
              only:
                - develop
                - /crm-[0-9]+/
      - deploy-staging:
          requires:
            - build-tbd
          filters:
            branches:
              only:
                - develop
      - deploy-standard:
          requires:
            - build-tbd
            - build-non-tbd
          filters:
            branches:
              only:
                - develop
                - /crm-slrb-.*/
                - /crm-[0-9]+/
      - hold-for-develop-approval:
          type: approval
          requires:
            - deploy-standard
          filters:
            branches:
              only:
                - develop
      - deploy-develop-production:
          requires:
            - hold-for-develop-approval
          filters:
            branches:
              only:
                - develop
      - deploy-preview:
          requires:
            - build-tbd
          filters:
            branches:
              only:
                - /crm-hotfix-.*/
      - hold-for-hotfix-approval:
          type: approval
          requires:
            - deploy-preview
          filters:
            branches:
              only:
                - /crm-hotfix-.*/
      - deploy-hotfix-production:
          requires:
            - hold-for-hotfix-approval
          filters:
            branches:
              only:
                - /crm-hotfix-.*/
