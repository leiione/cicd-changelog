version: 2.1

executors:
  node-executor:
    docker:
      - image: cimg/node:18.20.2

jobs:
  build:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: sudo apt-get update && sudo apt-get install -y tar
      - run:
          name: Install dependencies
          command: npm install --legacy-peer-deps
      - run:
          name: Install AWS CLI v2 and Less
          command: |
            sudo apt-get update && sudo apt-get install -y unzip less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
     
      - run:
          name: Download .env from S3
          command: |
            BRANCH_NAME=${CIRCLE_BRANCH}
            if [ "$BRANCH_NAME" == "develop" ]; then
              ENV_FILE=".env.staging.txt"
            elif [[ "$BRANCH_NAME" == crm-hotfix-* || "$BRANCH_NAME" == "master" ]]; then
              ENV_FILE=".env.live.txt"
            else
              echo "No Environment file needed for this branch" && exit 0
            fi
            aws s3 cp s3://crm-art/crm-envs-fe/$ENV_FILE .env
            echo "Using Environment file: $ENV_FILE"
            
      - run:
          name: Build the application
          command: CI=false npm run build
      - run:
          name: Create Dist folder and copy build artifact
          command: mkdir dist && cp -r build/* dist/
      - run:
          name: Install zip utility
          command: sudo apt-get update && sudo apt-get install -y zip
      - run:
          name: Zip the build artifacts
          command: zip -r build.zip dist
      
      
      - persist_to_workspace:
          root: .
          paths:
            - .env
            - dist

  deploy-to-env:
    docker:
      - image: cimg/node:18.20.2
    steps:
      - checkout
      - attach_workspace:
          at: workspace
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get update && sudo apt-get install -y unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Configure AWS
          command: |
            aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
            aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
            aws configure set region "$AWS_REGION"
      - run:
          name: Deploy to S3
          command: |
            BRANCH_NAME=${CIRCLE_BRANCH}
            S3_BUCKET="$BRANCH_NAME"
            echo "S3_BUCKET=$S3_BUCKET" >> $BASH_ENV
            aws s3 sync workspace/dist/ s3://microfrontend-crm-ms/prod/ \
              --acl public-read \
              --cache-control "no-cache, no-store, must-revalidate" \
              --metadata-directive REPLACE \
              --delete
            aws s3 ls s3://microfrontend-crm-ms/prod/
      - run:
          name: Invalidate CloudFront Cache
          command: |
            source $BASH_ENV
            CLOUDFRONT_DIST_ID=E27YPOVXTAAHKM
            INVALIDATION_ID=$(aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DIST_ID --paths "/*" --query "Invalidation.Id" --output text --no-cli-pager)
            echo "Waiting for CloudFront Invalidation ID: $INVALIDATION_ID"
            while true; do
              STATUS=$(aws cloudfront get-invalidation --distribution-id $CLOUDFRONT_DIST_ID --id $INVALIDATION_ID --query "Invalidation.Status" --output text --no-cli-pager)
              echo "Invalidation Status: $STATUS"
              if [ "$STATUS" == "Completed" ]; then
                echo "Invalidation Completed!"
                break
              fi
              sleep 10
            done
      - run:
          name: Verify Deployed URL
          command: |
            BRANCH_NAME=${CIRCLE_BRANCH}
            TEST_URL="https://crm-microfrontend.ms-visp.net/prod"
            echo "Testing URL: $TEST_URL"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -L "$TEST_URL")
            if [[ "$STATUS" =~ ^2|^3 ]]; then
              echo "$TEST_URL is reachable (HTTP $STATUS)"
            else
              echo "ERROR: $TEST_URL returned HTTP $STATUS"
              exit 1
            fi

  promote-to-production:
    docker:
      - image: cimg/node:18.20.2
    steps:
      - checkout
      - attach_workspace:
          at: workspace
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get update && sudo apt-get install -y unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Configure AWS
          command: |
            aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
            aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
            aws configure set region "$AWS_REGION"
      - run:
          name: Promote to Production
          command: |
            BRANCH_NAME=${CIRCLE_BRANCH}
            if [ "$BRANCH_NAME" == "develop" ]; then
              SOURCE="staging"
            elif [[ "$BRANCH_NAME" == crm-hotfix-* ]]; then
              SOURCE="$BRANCH_NAME"
            elif [[ "$BRANCH_NAME" == "master" ]]; then
              SOURCE="prod"
            else
              echo "Unsupported branch" && exit 1
            fi
            aws s3 sync s3://microfrontend-crm-ms/$SOURCE/ s3://microfrontend-crm-ms/prod/ \
              --acl public-read \
              --cache-control "no-cache, no-store, must-revalidate" \
              --metadata-directive REPLACE \
              --delete
            echo "$SOURCE" > version.txt
            aws s3 cp version.txt s3://microfrontend-crm-ms/prod/version.txt
      - run:
          name: Verify Production URL
          command: |
            PROD_URL="https://crm-microfrontend.ms-visp.net/prod"
            echo "Testing URL: $PROD_URL"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -L "$PROD_URL")
            if [[ "$STATUS" =~ ^2|^3 ]]; then
              echo "$PROD_URL is reachable (HTTP $STATUS)"
            else
              echo "ERROR: $PROD_URL returned HTTP $STATUS"
              exit 1
            fi

workflows:
  version: 2
  build-deploy-promote:
    jobs:
      - build
      - deploy-to-env:
          requires:
            - build
      - hold:
          type: approval
          requires:
            - deploy-to-env
      - promote-to-production:
          requires:
            - hold
