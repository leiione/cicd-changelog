version: 2.1

executors:
  node-executor:
    docker:
      - image: node:18

jobs:
  build:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: npm install --legacy-peer-deps
      - run:
          name: Build the application
          command: CI=false npm run build
      - run:
          name: Create Dist folder and copy build artifact
          command: |
            mkdir dist && cp -r build/* dist/
      - run:
          name: Install zip utility
          command: |
            apt-get update && apt-get install -y zip
      - run:
          name: Zip the build artifacts
          command: |
            zip -r build.zip dist
      - run:
          name: Install AWS CLI and Less
          command: |
            apt-get update && apt-get install -y awscli less
      - run:
          name: Download .env from S3
          command: |
            BRANCH_NAME=${CIRCLE_BRANCH}
            if [ "$BRANCH_NAME" == "develop" ]; then
              ENV_FILE=".env.staging.txt"
            elif [[ "$BRANCH_NAME" == hotfix* ]]; then
              ENV_FILE=".env.live.txt"
            else
              echo "No Environment file needed for this branch" && exit 0
            fi
            aws s3 cp s3://crm-art/crm-envs-fe/$ENV_FILE .env
            echo "Using Environment file: $ENV_FILE"
      - persist_to_workspace:
          root: .
          paths:
            - .env
            - dist

  deploy:
    docker:
      - image: node:18
    steps:
      - checkout
      - attach_workspace:
          at: /workspace
      - run:
          name: Install Prerequisites
          command: |
            apt-get update && apt-get install -y awscli
      - run:
          name: Configure AWS CLI
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set region $AWS_REGION
      - run:
          name: Deploy to appropriate S3 bucket
          command: |
            BRANCH_NAME=${CIRCLE_BRANCH}
            if [ "$BRANCH_NAME" == "develop" ]; then
              S3_BUCKET="staging"
            elif [[ "$BRANCH_NAME" == hotfix* ]]; then
              S3_BUCKET="hotfix"
            else
              S3_BUCKET="$BRANCH_NAME"
            fi
            echo "S3_BUCKET=$S3_BUCKET" >> $BASH_ENV
            aws s3 sync /workspace/dist/ s3://microfrontend-crm-ms/$S3_BUCKET/ --acl public-read
            echo "Deployment completed to: $S3_BUCKET"
      - run:
          name: Invalidate CloudFront Cache
          command: |
            source $BASH_ENV
            CLOUDFRONT_DIST_ID=E27YPOVXTAAHKM
            INVALIDATION_ID=$(aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DIST_ID --paths "/$S3_BUCKET/*" --query "Invalidation.Id" --output text --no-cli-pager)
            echo "Waiting for CloudFront Invalidation ID: $INVALIDATION_ID"
            while true; do
              STATUS=$(aws cloudfront get-invalidation --distribution-id $CLOUDFRONT_DIST_ID --id $INVALIDATION_ID --query "Invalidation.Status" --output text --no-cli-pager)
              echo "Invalidation Status: $STATUS"
              if [ "$STATUS" == "Completed" ]; then
                echo "Invalidation Completed!"
                break
              fi
              sleep 10
            done
      - run:
          name: Microfrontend MS URL Verification
          command: |
            source $BASH_ENV
            echo "Microfrontend is accessible at: https://crm-microfrontend.ms-visp.net/$S3_BUCKET"

  promote-to-production:
    docker:
      - image: amazon/aws-cli
    steps:
      - attach_workspace:
          at: /workspace
      - run:
          name: Configure AWS CLI
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set region $AWS_REGION
      - run:
          name: Promote deployment to production (/blue)
          command: |
            BRANCH_NAME=${CIRCLE_BRANCH}
            if [ "$BRANCH_NAME" == "develop" ]; then
              SOURCE="staging"
            elif [[ "$BRANCH_NAME" == hotfix* ]]; then
              SOURCE="hotfix"
            else
              echo "Unsupported branch for promotion" && exit 1
            fi
            aws s3 sync s3://microfrontend-crm-ms/$SOURCE/ s3://microfrontend-crm-ms/blue/ --acl public-read --delete
            echo "$SOURCE" > version.txt
            aws s3 cp version.txt s3://microfrontend-crm-ms/blue/version.txt
            echo "Promoted $SOURCE to /blue"

workflows:
  version: 2.1
  deploy-pipeline:
    jobs:
      - build:
          filters:
            branches:
              only:
                - develop
                - /hotfix.*/

      - deploy:
          name: deploy-to-env
          requires: [build]
          filters:
            branches:
              only:
                - develop
                - /hotfix.*/

      - hold-for-approval:
          type: approval
          requires: [deploy-to-env]
          filters:
            branches:
              only:
                - develop
                - /hotfix.*/

      - promote-to-production:
          requires: [hold-for-approval]
          filters:
            branches:
              only:
                - develop
                - /hotfix.*/
