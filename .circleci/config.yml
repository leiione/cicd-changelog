version: 2.1

executors:
  node-executor:
    docker:
      - image: node:18

jobs:
  build:
    executor: node-executor
    steps:
      - checkout

      - run:
          name: Install dependencies
          command: npm install --legacy-peer-deps
      
      - run:
          name: Build the application
          command: CI=false npm run build

      - run:
          name: Create Dist folder and copy build artifact
          command: |
            mkdir dist && cp -r build/* dist/

      - run:
          name: Install zip utility
          command: |
            apt-get update
            apt-get install -y zip

      - run:
          name: Zip the build artifacts
          command: |
            mkdir dist && cp -r build/* dist/
            zip -r build.zip dist

      - run:
          name: Install AWS CLI and Less
          command: |
            apt-get update && apt-get install -y awscli less
      - run:
          name: Download .env from S3
          command: |
            BRANCH_NAME=${CIRCLE_BRANCH}
            if [ "$BRANCH_NAME" == "develop" ]; then
              ENV_FILE=".env.staging.txt"
            elif [ "$BRANCH_NAME" == "master" ]; then
              ENV_FILE=".env.production.txt"
            else
              echo "No Environment file needed for this branch" && exit 0
            fi
            aws s3 cp s3://crm-art/crm-envs-fe/$ENV_FILE .env
            echo "Using Environment file: $ENV_FILE"


      - persist_to_workspace:
          root: .
          paths:
            - .env
            - dist

  deploy:
    docker:
      - image: node:18  # For AWS CLI
    steps:
      - checkout
      - attach_workspace:
          at: /workspace
      - run:
          name: Install Prerequisites
          command: |
            apt-get update
            apt-get install -y unzip less

      - run:
          name: Install AWS CLI
          command: |
            apt-get update
            apt-get install -y unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install

      - run:
          name: Configure AWS CLI
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set region $AWS_REGION

      - run:
          name: Determine Target S3 Bucket
          command: |
            BRANCH_NAME=${CIRCLE_BRANCH}
            if [ "$BRANCH_NAME" == "develop" ]; then
              S3_BUCKET="staging"
            elif [ "$BRANCH_NAME" == "master" ]; then
              S3_BUCKET="production"
            else
              S3_BUCKET="$BRANCH_NAME"
            fi
            echo "S3_BUCKET=$S3_BUCKET" >> $BASH_ENV
            echo "Deploying to S3 bucket: $S3_BUCKET"

      - run:
          name: Upload to S3
          command: |
            source $BASH_ENV
            aws s3 sync /workspace/dist/ s3://microfrontend-crm-ms/$S3_BUCKET/ --acl public-read
            echo "Uploaded files to s3://microfrontend-crm-ms/$S3_BUCKET/"

      - run:
          name: Invalidate CloudFront Cache
          command: |
            CLOUDFRONT_DIST_ID=E27YPOVXTAAHKM
            INVALIDATION_ID=$(aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DIST_ID --paths "/*" --query "Invalidation.Id" --output text --no-cli-pager)

            echo "Waiting for CloudFront Invalidation ID: $INVALIDATION_ID"
            while true; do
              STATUS=$(aws cloudfront get-invalidation --distribution-id $CLOUDFRONT_DIST_ID --id $INVALIDATION_ID --query "Invalidation.Status" --output text --no-cli-pager)
              echo "Invalidation Status: $STATUS"
              if [ "$STATUS" == "Completed" ]; then
                echo "Invalidation Completed!"
                break
              fi
              sleep 10  # Wait for 10 seconds before checking again
            done
       
      - run:
          name: Microfrontend MS URL Verification
          command: |
            source $BASH_ENV
            DEPLOY_URL="https://crm-microfrontend.ms-visp.net/$S3_BUCKET"
            echo "Microfrontend is accessible at: $DEPLOY_URL"
            
      
      - run:
          name: Send Slack Notification
          command: |
            curl -X POST -H 'Content-type: application/json' --data "{
              \"attachments\": [
                {
                  \"color\": \"#36a64f\",
                  \"title\": \"CircleCI Build Notification\",
                  \"fields\": [
                    { \"title\": \"Job\", \"value\": \"${CIRCLE_JOB}\", \"short\": true },
                    { \"title\": \"Branch\", \"value\": \"${CIRCLE_BRANCH}\", \"short\": true },
                    { \"title\": \"Commit\", \"value\": \"${CIRCLE_SHA1:0:7}\", \"short\": true },
                    { \"title\": \"Build Number\", \"value\": \"${CIRCLE_BUILD_NUM}\", \"short\": true },
                    { \"title\": \"Status\", \"value\": \"${CIRCLE_JOB}\", \"short\": true },
                    { \"title\": \"Build URL\", \"value\": \"<${CIRCLE_BUILD_URL}|View Build>\", \"short\": false },
                    { \"title\": \"Deploy URL\", \"value\": \"${DEPLOY_URL:-N/A}\", \"short\": false }
                  ]
                }
              ]
            }" https://hooks.slack.com/services/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


workflows:
  build_and_deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
