version: 2.1

executors:
  node-executor:
    docker:
      - image: node:18

jobs:
  build:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: npm install --legacy-peer-deps
      - run:
          name: Build the application
          command: npm run build
      - run:
          name: Create Dist folder and copy build artifacts
          command: mkdir dist && cp -r build/* dist/
      - run:
          name: Install zip utility
          command: |
            apt-get update
            apt-get install -y zip
      - run:
          name: Zip the build artifacts
          command: zip -r build.zip dist
      - persist_to_workspace:
          root: .
          paths:
            - dist

  deploy:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: /workspace
      - run:
          name: Install Prerequisites
          command: apt-get update && apt-get install -y unzip less
      - run:
          name: Install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
      - run:
          name: Configure AWS CLI
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set region $AWS_REGION
      - run:
          name: Upload to S3
          command: |
            BRANCH_NAME=staging
            S3_BUCKET=microfrontend-crm-ms
            aws s3 sync /workspace/dist/ s3://$S3_BUCKET/$BRANCH_NAME/ --acl public-read
      - run:
          name: Invalidate CloudFront Cache
          command: |
            CLOUDFRONT_DIST_ID=E27YPOVXTAAHKM
            aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DIST_ID --paths "/*"
            DEPLOY_URL="https://crm-microfrontend.ms-visp.net/$BRANCH_NAME"
            echo "Microfrontend is accessible at: $DEPLOY_URL"
      - run:
          name: Send Notification to RingCentral
          command: |
            if [ $? -eq 0 ]; then
              STATUS="Success"
              MESSAGE="Deployment for branch '${CIRCLE_BRANCH}' completed successfully."
            else
              STATUS="Failure"
              MESSAGE="Deployment for branch '${CIRCLE_BRANCH}' failed."
            fi

            BUILD_URL="https://circleci.com/gh/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BUILD_NUM}"

            USERNAME="${CIRCLE_USERNAME}"

            PAYLOAD=$(echo -e '{
              "payload": {
                "status": "'${STATUS}'",
                "text": "**CircleCI Deployment Notification**\\nBranch: '${CIRCLE_BRANCH}'\\nStatus: '${STATUS}'\\nMessage: '${MESSAGE}'",
                "build_num": '${CIRCLE_BUILD_NUM}',
                "build_url": "'${BUILD_URL}'",
                "vcs_url": "'${VCS_URL}'",
                "branch": "'${CIRCLE_BRANCH}'",
                "reponame": "'${CIRCLE_PROJECT_REPONAME}'",
                "username": "'${USERNAME}'"
                }
              }')

              curl -X POST -H "Content-Type: application/json" -d "$PAYLOAD" ${WEBHOOK_URL}
workflows:
  build_and_deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
